<queries>
  <query name="net.ksdr1.powerschool.oneroster.classes" coreTable="sections" flattened="true">
	<summary>OneRoster 1.1 classes</summary>
    <columns>
      <column column="SECTIONS.ID">a_sourcedId</column>
	  <column column="SECTIONS.TEAM">b_status</column>
	  <column column="SECTIONS.GRADEPROFILE">c_dateLastModified</column>
	  <column column="COURSES.COURSE_NAME">d_title</column>
	  <column column="SECTIONS.EXTERNAL_EXPRESSION">e_grades</column>
	  <column column="SECTIONS.COURSE_NUMBER">f_courseSourcedId</column>
	  <column column="SECTIONS.INSTRUCTION_LANG">g_classCode</column>
	  <column column="SECTIONS.SECTION_TYPE">h_classType</column>
	  <column column="SECTIONS.ROOM">i_location</column>
	  <column column="SECTIONS.SCHOOLID">j_schoolSourcedId</column>
	  <column column="SECTIONS.TERMID">k_termSourcedIds</column>
	  <column column="SECTIONS.FASTPERLIST">l_subjects</column>
	  <column column="SECTIONS.ATT_MODE_CODE">m_subjectCodes</column>
	  <column column="SECTIONS.EXPRESSION">n_periods</column>
    </columns>
    <sql><![CDATA[
with yearquery as (select 
  id, abbreviation
from terms
where portion = 1
  AND sysdate BETWEEN firstday-30 and lastday+30
  AND schoolid=0
),
orgSource as (select 
  sections.dcid as dcid,
  case cast(sections.SchoolID as varchar2(10))
    when '0'
    then cast((select prefs.value from prefs where prefs.name = 'districtnumber') as varchar2(10))
    else cast(sections.SchoolID as varchar2(10))
  end as SchoolID
from sections)
select
  sections.id as sourcedId,
  null as status,
  null as dateLastModified,
  case
    when SectionTeacher.SectionNickname is not null and yearquery.id = sections.termid then SectionTeacher.SectionNickname || ' | ' || yearquery.abbreviation || ' | ' || courses.course_name || ' | Per ' || sections.expression || ' | Sec ' || sections.section_number
    when SectionTeacher.SectionNickname is not null and yearquery.id != sections.termid then SectionTeacher.SectionNickname || ' | ' || yearquery.abbreviation || ' | ' || terms.abbreviation || ' | ' || courses.course_name || ' | Per ' || sections.expression || ' | Sec ' || sections.section_number
    when SectionTeacher.SectionNickname is null and yearquery.id = sections.termid then yearquery.abbreviation || ' | ' || courses.course_name || ' | Per ' || sections.expression || ' | Sec ' || sections.section_number
    when SectionTeacher.SectionNickname is null and yearquery.id != sections.termid then yearquery.abbreviation || ' | ' || terms.abbreviation || ' | ' || courses.course_name || ' | Per ' || sections.expression || ' | Sec ' || sections.section_number
    else yearquery.abbreviation || ' | ' || terms.abbreviation || ' | ' || courses.course_name || ' | Per ' || sections.expression || ' | Sec ' || sections.section_number
  end as title,
  case 
    when sections.grade_level <= -3 then 'IT'
    when sections.grade_level between -2 and -1 then 'PK'
    when sections.grade_level = 0 then 'KG'
    when sections.grade_level between 1 and 13 then trim(to_char(sections.grade_level,'00'))
    when sections.grade_level > 13 then 'PS'
    else 'Other'
  end as grades,
  courses.dcid as courseSourcedId,
 null as classCode,
  'scheduled' as classType,
  sections.room as location,
  orgSource.schoolid as schoolSourcedId,
  orgSource.schoolid || '-' || SECTIONS.TERMID as termSourcedIds,
  null as subjects,
  null as subjectCodes,
  sections.expression as periods
from sections
left join courses on sections.course_number = courses.course_number
left join terms on terms.id=sections.termid and sections.schoolid=terms.schoolid
left join schools on schools.school_number=sections.schoolid
left join SectionTeacher on SectionTeacher.TeacherID=sections.Teacher and SectionTeacher.SectionID=sections.id and SectionTeacher.SectionNickname is not null
join teachers t on sections.teacher=t.id and t.ptaccess = 1 and t.status = 1 and t.StaffStatus = 1
left join yearquery on 1=1
join (select * from orgSource) orgSource on orgSource.dcid = sections.dcid
join (SELECT 
    sectionid,
    COUNT(sectionid) as NO_OF_STUDENTS
    from cc
    GROUP BY sectionid
    ) q ON sections.id = q.sectionid
where (sections.termid between yearquery.id and yearquery.id+99)
Order by q.NO_OF_STUDENTS desc
    ]]></sql>
  </query>
  <!-- Define more queries here -->
</queries>